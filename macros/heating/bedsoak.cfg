## Bed soak
# version: 1.0
[gcode_macro BEDSOAK]
description: Helper:Wait for bed power stability
variable_bedsoak_pending: False
variable_bedsoak:  {'timeout' : 30,
                    'next_gcode' : ''}
gcode:
    {% set _= bedsoak.update({'timeout' : params.TIMEOUT|default(30)|int }) %}
    {% set _= bedsoak.update({'next_gcode' : params.NEXT_GCODE|default('RESUME_BASE')|string }) %}
    {% set async = (params.ASYNC|default('false')|lower == 'true') %}

    {% if printer.heater_bed.target == 0 %}
        _RESPOND STATUS=printing MSG="No bed soak needed !"
        {bedsoak.next_gcode|upper}
    {% else %}
        {% if not bedsoak_pending %}
            SET_GCODE_VARIABLE MACRO=BEDSOAK VARIABLE=bedsoak_pending VALUE=True

            _RESPOND STATUS=heating MSG="Entering bed soak !" 
            _RESPOND MSG="Waiting for bed temperature"

            {% if printer.virtual_sdcard.file_position > 0 and async %}
        # from file: put the printer in pause mode, let you interact with print or resume/cancel soak
                
                # Wait for bed temperature Check bed temp every 5 sec until bed reach target (max 20 min)
                UPDATE_DELAYED_GCODE ID=_BEDTEMP_CHECK DURATION=5
                UPDATE_DELAYED_GCODE ID=_BEDTEMP_CHECK_INTERRUPT DURATION={bedsoak.timeout*60}  #Wait
                
                {% if not printer.pause_resume.is_paused %}
                    G4 P2000 # Let time to Moonraker to catch printing status FIXED : 10/03/2022
                    PAUSE_BASE       
                {% endif %}    
            {% else %}
        # from macro: unable to interact except M112
                M400    
                TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={printer.heater_bed.target - 3} # Wait bed temperature

                {% if bedsoak.timeout > 0 %}
                    _RESPOND MSG="{"Bed soak until stability for max. %s  min." % (bedsoak.timeout)  }"
                    _RESPOND MSG="Unable to interact with printer during SOAK"
                {% endif %}
                {% for t in range((bedsoak.timeout * 60/printer['gcode_macro _bed_power'].interval)|int) %}
                    _bed_power ASYNC=False # Interrupt soak delay when bed power stabilization (Async mode off)
                {% endfor %}
                _bed_power_interrupt
                {bedsoak.next_gcode|upper}
                SET_GCODE_VARIABLE MACRO=BEDSOAK VARIABLE=bedsoak_pending VALUE=False

            {% endif %}
        {% endif %}
    {% endif %}

# Wait bed reach target temperature (Async, can be interrupt)
[delayed_gcode _BEDTEMP_CHECK]
gcode:
    {% set _bs_vars = printer['gcode_macro BEDSOAK'] %}
    {% if _bs_vars.bedsoak_pending %}
        {% if printer.heater_bed.temperature > printer.heater_bed.target - 3 %}
            UPDATE_DELAYED_GCODE ID=_BEDTEMP_CHECK_INTERRUPT DURATION=0.1
        {% else %}
            UPDATE_DELAYED_GCODE ID=_BEDTEMP_CHECK DURATION=5    
        {% endif %}
    {% endif %}

# Temperature wait interruption (async)
[delayed_gcode _BEDTEMP_CHECK_INTERRUPT]
gcode:
    {% set _bs_vars = printer['gcode_macro BEDSOAK'] %}
    {% if _bs_vars.bedsoak_pending %}
        UPDATE_DELAYED_GCODE ID=_BEDTEMP_CHECK DURATION=0
        {% if _bs_vars.bedsoak.timeout > 0 %}
            _RESPOND MSG="{"Bed soak until stability for max. %s min ." % _bs_vars.bedsoak.timeout }"
            _RESPOND MSG="Use RESUME to go further"
        {% endif %}
        _bed_power  # Interrupt soak delay when bed power is stabilized 
        UPDATE_DELAYED_GCODE ID=_BEDSOAK_INTERRUPT DURATION={_bs_vars.bedsoak.timeout * 60 + 0.1}
    {% endif %}

# End of bedsoak (async)
[delayed_gcode _BEDSOAK_INTERRUPT]
gcode:
    {% set _bs_vars = printer['gcode_macro BEDSOAK'] %}
    {% if _bs_vars.bedsoak_pending %}
      SET_GCODE_VARIABLE MACRO=BEDSOAK VARIABLE=bedsoak_pending VALUE=False
      UPDATE_DELAYED_GCODE ID=_bed_power_delayed DURATION=0 # Stop bed_power check
      _bed_power_interrupt
      {_bs_vars.bedsoak.next_gcode|string}
    {% endif %}

# Cancel bedsoak (async only)
[gcode_macro _BEDSOAK_CANCEL]
gcode:
    SET_GCODE_VARIABLE MACRO=BEDSOAK VARIABLE=bedsoak_pending VALUE=False
    _bed_power_reset ALL=True
    UPDATE_DELAYED_GCODE ID=_BEDTEMP_CHECK DURATION=0
    UPDATE_DELAYED_GCODE ID=_BEDTEMP_CHECK_INTERRUPT DURATION=0
    UPDATE_DELAYED_GCODE ID=_BEDSOAK_INTERRUPT DURATION=0
    UPDATE_DELAYED_GCODE ID=_bed_power_delayed DURATION=0 # Stop bed_power check

# Compute smoothed quadratic derivative of bed_power
# based on Savitzky-Golay algorithm
[gcode_macro _bed_power]
variable_min_vals: 9 #Min buffer length
variable_max_vals: 25 #Max buffer length
variable_interval: 5  #interval between measurements in s
variable_buffer: []   #stored power values
variable_d: {'val': 100, 'duration': 0,'stable': 0}
variable_is_stable: False
variable_stability: 1.8E-4 
variable_stability_times: 3
gcode:

    {% set async = (params.ASYNC|default('true')|lower == 'true') %} #Used by BEDSOAK to determine behavior
    
    {% if printer['gcode_macro BEDSOAK'].bedsoak_pending and not is_stable %}
        
        {% if buffer|length > min_vals %} 
            {% set _=d.update({'val':0}) %}
        # normalize sample (size should be odd number)
            {% set half_window = ((buffer|length -1 )/2)|int %}
            {% set window_size = half_window*2 +1 %}
            {% set inc = 1 - (buffer|length % 2) %}  # 0 for odd, 1 for evens
            {% set norm = window_size * (window_size + 1) * 2 * interval %}  # Normalization factor

        # Compute Smoothed Quadratic derivative of center value
            {% for i in range(window_size) %}
                {% set _=d.update({'val':0 + d.val + buffer[i + inc]*(i-half_window)/norm}) %}
            {% endfor %}

            _RESPOND VERBOSE=True MSG="Bed power variation {"%.2f" % (d.val*6000)}%/min, nb of samples: {window_size}" 
        {%endif %}
        
        # Test if stability is reached (4 times under "stability")
        {% if d.val|abs < stability %}
            {% set _=d.update({'stable': (d.stable + 1)}) %}
            {% if d.stable > stability_times %}
                _RESPOND VERBOSE=True MSG="Bed power reached stabilization {d.val*100}%/s"
                _RESPOND VERBOSE=True MSG="{ "Bed soak total time : %smin %ss" % ((d.duration/60)|int,(d.duration%60)|int) }"
                SET_GCODE_VARIABLE MACRO=_bed_power VARIABLE=is_stable VALUE=True
                _bed_power_reset
                
                {% if async %}
                    UPDATE_DELAYED_GCODE ID=_BEDSOAK_INTERRUPT DURATION=0.1
                {% endif %}
            {% endif %}
        {% else %}
            {% set _=d.update({'stable': 0}) %}
        {% endif %}
        {% if d.stable <= stability_times %}

            SET_GCODE_VARIABLE MACRO=_bed_power VARIABLE=is_stable VALUE=False
            {% if async %}
                UPDATE_DELAYED_GCODE ID=_bed_power_delayed DURATION={interval}
            {% else %}
                G4 P{interval * 1000}
                _bed_power_populate_buffer
            {% endif %}
            {% set _=d.update({'duration': (d.duration|int + interval)}) %}
        {% endif %}    
        
    {% endif %}

# populate _bed_power buffer
[gcode_macro _bed_power_populate_buffer]
gcode:
    {% set _vars = printer['gcode_macro _bed_power'] %}
    {% set pow= printer.heater_bed.power|float %}
    {% set _= _vars.buffer.append(pow) %}
    {% if _vars.buffer|length > (_vars.max_vals) %}
       {% set _= _vars.buffer.pop(0) %}
    {% endif %}
    SET_GCODE_VARIABLE MACRO=_bed_power VARIABLE=buffer VALUE='{_vars.buffer}'

# Delayed gcode to populate buffer
[delayed_gcode _bed_power_delayed]
gcode:
    {% set _vars = printer['gcode_macro _bed_power'] %}
    {% set _bs = printer['gcode_macro BEDSOAK'].bedsoak %}
    {% if not _vars.is_stable %}
        _bed_power_populate_buffer
        _bed_power
    {% endif %}

# initialize _bed_power variables
[gcode_macro _bed_power_reset]
gcode:
    SET_GCODE_VARIABLE MACRO=_bed_power VARIABLE=buffer VALUE='[]'
    SET_GCODE_VARIABLE MACRO=_bed_power VARIABLE=d VALUE='{ {'val': 100, 'duration': 0, 'stable': 0}|tojson|string }'
    {% if params.ALL|lower == 'true' %}
        SET_GCODE_VARIABLE MACRO=_bed_power VARIABLE=is_stable VALUE=False 
    {% endif %}

# reset _bed_power after interrupt
[gcode_macro _bed_power_interrupt]
gcode:
    {% set _vars = printer['gcode_macro _bed_power'] %}
    {% if not _vars.is_stable %}
        _RESPOND VERBOSE=True MSG="bed soak was interrupted at {"%smin %ss" % ((_vars.d.duration/60)|int,_vars.d.duration%60)}, bed stability {_vars.d.val}%/s"
    {% endif %}
    _bed_power_reset ALL=True