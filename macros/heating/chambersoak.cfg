########################################################################
##    Macros to manage with chamber temperature
#
# To use M141 and M191 you must set chamber variables in _User_Variables
# first !
# This file may be distributed under the terms of the GNU GPLv3 license.

## internal use : PAUSE 1sec if sensor is not in temp range
[gcode_macro _TEMP_WAIT_WRAPPER]
gcode:
    {% set sensor = params.SENSOR %}
    {% set temp_min = params.MINIMUM|default(0)|float %}
    {% set temp_max = params.MAXIMUM|default(200)|float %}
    
    {% if printer[sensor] %}
      {% if printer[sensor].temperature < temp_min
        or printer[sensor].temperature > temp_max %}
        G4 P1000
      {% endif %}
    {% endif %}

[gcode_macro M191]
description: Helper:Set chamber temperature (with wait for heating/cooling).
  Usage: M191 [S<temp>] [R<temp>] [T<duration>]
gcode:
    {% set _vars = printer['gcode_macro _User_Variables'] %}
    {% set temp_min = params.S|default(0)|float %}
    {% set temp_max = params.R|default(200)|float %}
    {% set timeout = params.T|default(120)|float *60 %} #Wait 2 hours max
    {% set regulation_type , regulator = (_vars.chamber_temperature_sensor|default('none none')).split(' ') %}
    
    {% if regulation_type in  ['heater','temperature_fan', 'temperature_sensor'] %}
      ## set temperatures
      M141 S{temp_min} R{temp_max}
      ## wait for temperature reach or timeout
      # TEMPERATURE_WAIT SENSOR="{_vars.chamber_temperature_sensor}" MINIMUM={temp_min} MAXIMUM={temp_max} TIMEOUT={timeout}
      {% for t in range(0,timeout|int) %}
        _TEMP_WAIT_WRAPPER SENSOR="{_vars.chamber_temperature_sensor}" MINIMUM={temp_min} MAXIMUM={temp_max}
      {% endfor %}
    {% endif %}

## Use heater of exhaust to regulate chamber temperature
[gcode_macro M141]
description: Helper:Set chamber temperature. (heating or cooling)
  Usage: M141 [S<temp>] [R<temp>]
gcode:
    {% set _vars = printer['gcode_macro _User_Variables'] %}
    {% set temp_min = params.S|default(0)|float %}
    {% set temp_max = params.R|default(200)|float %}
    {% set regulation_type , regulator = (_vars.chamber_temperature_sensor|default('none none')).split(' ') %}
    
    {% if regulation_type in  ['heater','temperature_fan', 'temperature_sensor'] %}
      {% if regulation_type == 'heater' and temp_min > 0 %}
        SET_HEATER_TEMPERATURE HEATER="{_vars.chamber_temperature_sensor}" TARGET={temp_min}
      {% elif regulation_type == 'temperature_fan' and temp_max < 200 %}
        SET_TEMPERATURE_FAN_TARGET  TEMPERATURE_FAN={regulator} TARGET={temp_max}
      {% endif %}
    {% endif %}

[gcode_macro CHAMBERSOAK]
description: Helper:Wait for chamber min temp async
variable_soak_pending: False
variable_soak:  {'timeout' : 30,
                    'next_gcode' : ''}
gcode:
    {% set _= soak.update({'timeout' : params.TIMEOUT|default(30)|int }) %}
    {% set _= soak.update({'next_gcode' : params.NEXT_GCODE|default('RESUME_BASE')|string }) %}
    {% set _= soak.update({'target_temp' : params.TARGET|default(0)|int}) %}
    {% set async = (params.ASYNC|default('false')|lower == 'true') %}

        {% if not soak_pending %}
            SET_GCODE_VARIABLE MACRO=CHAMBERSOAK VARIABLE=soak_pending VALUE=True

            _RESPOND STATUS=heating MSG="Entering chamber soak !" 
            _RESPOND MSG="Waiting for chamber temperature for max {"%smin" % soak.timeout}"

            {% if printer.virtual_sdcard.file_position > 0  and async %}
        # from file: put the printer in pause mode, let you interact with print or resume/cancel soak
                
                # Wait for bed temperature Check bed temp every 5 sec until bed reach target (max 20 min)
                UPDATE_DELAYED_GCODE ID=_CHAMBERTEMP_CHECK DURATION=5
                UPDATE_DELAYED_GCODE ID=_CHAMBERTEMP_CHECK_INTERRUPT DURATION={soak.timeout} #Wait      
                
                {% if not printer.pause_resume.is_paused %}
                G4 P2000
                PAUSE_BASE
                {% endif %}

            {% else %}
        # from macro: unable to interact except M112
                M400    
                M191 S{soak.target_temp} T{soak.timeout}# Wait bed temperature
                SET_GCODE_VARIABLE MACRO=CHAMBERSOAK VARIABLE=soak_pending VALUE=False
                {soak.next_gcode}

            {% endif %}
        {% endif %}

[delayed_gcode _CHAMBERTEMP_CHECK]
gcode:
    {% set _cs_vars = printer['gcode_macro CHAMBERSOAK'] %}
    {% set _vars = printer['gcode_macro _User_Variables'] %}
  
    {% if _cs_vars.soak_pending %}
        {% if printer[_vars.chamber_temperature_sensor].temperature >= _cs_vars.soak.target_temp %}
            UPDATE_DELAYED_GCODE ID=_CHAMBERTEMP_CHECK_INTERRUPT DURATION=0.1
        {% else %}
            UPDATE_DELAYED_GCODE ID=_CHAMBERTEMP_CHECK DURATION=5    
        {% endif %}
    {% endif %}

[delayed_gcode _CHAMBERTEMP_CHECK_INTERRUPT]
gcode:
    {% set _cs_vars = printer['gcode_macro CHAMBERSOAK'] %}
    {% if _cs_vars.soak_pending %}
        UPDATE_DELAYED_GCODE ID=_CHAMBERTEMP_CHECK DURATION=0
        {_cs_vars.soak.next_gcode}
    {% endif %}

[gcode_macro _CHAMBERSOAK_CANCEL]
gcode:
    SET_GCODE_VARIABLE MACRO=CHAMBERSOAK VARIABLE=soak_pending VALUE=False
    UPDATE_DELAYED_GCODE ID=_CHAMBERTEMP_CHECK DURATION=0
    UPDATE_DELAYED_GCODE ID=_CHAMBERTEMP_CHECK_INTERRUPT DURATION=0