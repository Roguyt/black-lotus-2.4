
## adaptive Heat soak
# version: 2.0
# changelog :
#   -V 1.0 : adaptive bed soak initial release
#   -V 2.0 : adaptive heatsoak for bed, chamber, extruder, Async mode only (can be use only while Printing)

# Note :
# These macros intents to set heaters taregt adapt heat soak of 3D printer and use bed power stability to 
# determine best soak duration. It was design for a Voron 2.4 300 mm printer

# Installation :
#  copy heatsoak.cfg in your config folder, add an include [include <YOUR_PATH/heatsoak.cfg] in
#  your printer.cfg
#  In order to benefit of the async mod you need to modify/override RESUME ans CANCEL_PRINT macros
# RESUME and CANCEL should be like this

#  [gcode_macro RESUME]
#  rename_existing: RESUME_BASE
#  gcode:
#    {% if printer.pause_resume.is_paused %}
#     {% if printer['gcode_macro HEATSOAK'].soak_pending %}
#      _HEATSOAK_NEXT
#     {% else %}
#      ... YOUR CODE HERE ...
#      RESUME_BASE
#     {% endif %}
#    {% endif %}

#  [gcode_macro CANCEL_PRINT]
#  rename_existing: CANCEL_BASE
#  gcode:
#     _HEATSOAK_CANCEL
#     ... YOUR CODE HERE ...
#     CANCEL_BASE

# Usage:
# WARNING : HEATSOAK MUST NOT BE INCLUDED IN PRINT_START MACRO
# As it uses PAUSE/RESUME sequence it would yield to unpredictible behavior if included in start_print
# Your slicer start_gcode should be like this

# e.g Superslicer
#   HEATSOAK BED_TEMP=[first_layer_bed_temperature] EXTRUDER_TEMP={first_layer_temperature[initial_extruder]+extruder_temperature_offset[initial_extruder]-40} CHAMBER_TEMP=[chamber_temperature]
#   PRINT_START <YOUR_STUFF>

#  If you need some actions to be done before heatsoak put its in another macro
# e.g.
#    PREFLY
#    HEATSOAK <blahblahblah>
#    PRINT_START <blahblahblah>

# The Heatsoak sequence is defined in _USER_VARIABLES macro (see example below)
# ! IMPORTANT ! : Set the sensor values according to your printer configuration

# The order of sequence can be changed or removed but setting bed_power before bed_temp could be funny XD
# available sequence items :
#   bed_temp : set bed heater target temperature and wait to reach it
#   chamber_temp : wait to reach target temperature
#   extruder_temp :  set extruder target temperature and wait to reach it
#   bed_power : wait for PWM statbility (Experimental)
#   timer : wait for X minutes
# Item can be used only once

# hs_sequence
[gcode_macro _User_Variables]
variable_hs_sequence: {
                    'bed_temp':{'sensor': 'heater_bed', 'offset_temp': 3},
                    'bed_power':{},
                    'chamber_temp':{'sensor': 'temperature_sensor chamber'},
                    'extruder_temp':{'sensor': 'extruder'}
                    }
gcode:

[gcode_macro HEATSOAK]
description: Printer warmup sequence
variable_interval: 2
variable_soak_pending: False
variable_soak:  {'current_seq': 0,
                'reached' : False }
variable_current_timer: 0
variable_total_timer:0
gcode:
    {% set _uv = printer['gcode_macro _User_Variables'] %}
    {% set _= soak.update({'timeout' : params.TIMEOUT|default(30)|int }) %} #Timeout can be set in Params Entries or hs_sequence object, default 30 min

    {% if not soak_pending %}

        # from file: put the printer in pause mode, let you interact with print or resume/cancel soak
        {% if printer.virtual_sdcard.file_position > 0 %}
            
        # Copy Entry parameters in hs_sequence object
            {% set _= soak.update({'current_seq': 'start','reached': True}) %}
            {% for param in _uv.hs_sequence %}
                    {% set _= _uv.hs_sequence[param].update({'target' : params[param|upper]|default(0)|float}) %}
            {% endfor %}
            SET_GCODE_VARIABLE MACRO=_User_Variables VARIABLE=hs_sequence VALUE="{ _uv.hs_sequence|string }"

        # Start Heat soak sequence
            SET_GCODE_VARIABLE MACRO=HEATSOAK VARIABLE=soak_pending VALUE=True #HEATSOAK status, prevent to call it twice
            UPDATE_DELAYED_GCODE ID=_HEATSOAK_TIMER DURATION=1  #Start timer. it runs as long as soak_pending=true
        
            _RESPOND STATUS=heating MSG="Entering heatsoak !" 

            _HEATSOAK_INTERRUPT # initiate "LOOP" 
            
            {% if not printer.pause_resume.is_paused %}
                G4 P1000 # Let time to Moonraker to catch printing status FIXED : 10/03/2022
                {% if printer.z_thermal_adjust %}
                    SET_Z_THERMAL_ADJUST ENABLE=0
                {% endif %}
                
                # Pause printer with Klipper PAUSE command
                {% if printer.configfile.settings['gcode_macro pause'] is defined %}
                    {printer.configfile.settings['gcode_macro pause'].rename_existing }
                {% else %}
                    PAUSE
                {% endif %}

            {% endif %}    
        {% else %}
        # from macro: throw error
            {action_raise_error("HEATSOAK MUST be run in Print mode")}

        {% endif %}
    {% endif %}

# Wait bed reach target temperature (Async, can be interrupt)
[delayed_gcode _HEATSOAK_CHECK]
gcode:
    {% set _hs = printer['gcode_macro HEATSOAK'] %}
    {% if _hs.soak_pending %}
        {% if _hs.soak.reached %}
            _HEATSOAK_INTERRUPT
        {% else %}
            UPDATE_DELAYED_GCODE ID=_HEATSOAK_CHECK DURATION={_hs.interval}
            {% if printer['gcode_macro _' + _hs.soak.current_seq] is defined %}
            _{_hs.soak.current_seq}   
            {% else %}
                { action_raise_error('_%s does not exist' % (_hs.soak.current_seq)) }
            {% endif %}
        {% endif %}
    {% endif %}

[delayed_gcode _HEATSOAK_TIMEOUT]
gcode:
    _HEATSOAK_NEXT

# Heatsoak next phase interrupt phase
[gcode_macro _HEATSOAK_NEXT]
gcode:
    {% set _hs = printer['gcode_macro HEATSOAK'] %}
    {% if _hs.soak_pending %}
        
        SET_GCODE_VARIABLE MACRO=HEATSOAK VARIABLE=total_timer VALUE={_hs.total_timer + _hs.current_timer}
        SET_GCODE_VARIABLE MACRO=HEATSOAK VARIABLE=current_timer VALUE=0
        _RESPOND MSG="{ "%s duration : %smin %ss" % (params.NAME|default(_hs.soak.current_seq),(_hs.current_timer/60)|int,(_hs.current_timer%60)|int) }"
        
        {% set _=  _hs.soak.update({'reached': True}) %}
        SET_GCODE_VARIABLE MACRO=HEATSOAK VARIABLE=soak VALUE="{_hs.soak|string}"
        UPDATE_DELAYED_GCODE ID=_HEATSOAK_CHECK DURATION=0.1
    {% endif %}
    
#  Heatsoak wait interruption (async)
[gcode_macro _HEATSOAK_INTERRUPT]
gcode:
    {% set _hs_sequence =  printer['gcode_macro _User_Variables'].hs_sequence %}
    {% set _hs = printer['gcode_macro HEATSOAK'] %}
    
    {% if _hs.soak_pending %}

        UPDATE_DELAYED_GCODE ID=_HEATSOAK_TIMEOUT DURATION=0 #Cancel timeout action
        {% for seq in _hs_sequence %}
            {% if _hs.soak.reached %} #Check if soak is reached to avoid misscall
                {% if seq == _hs.soak.current_seq or _hs.soak.current_seq == 'start' %}
                
                # Exit Heatsoak : Last item target reached 
                    {% if loop.last and _hs.soak.current_seq != 'start'%}
                        # Use Klipper resume command

                        _RESPOND MSG="{"HEATSOAK Total duration : %smin %ss" % (((_hs.total_timer)/60)|int,((_hs.total_timer)%60)|int) }"
                        {% if printer.configfile.settings['gcode_macro resume'] is defined %}
                            {printer.configfile.settings['gcode_macro resume'].rename_existing }
                        {% else %}
                            RESUME
                        {% endif %}

                        {% if printer.z_thermal_adjust %}
                            SET_Z_THERMAL_ADJUST ENABLE=1
                        {% endif %}

                        #Reset parameters
                        _HEATSOAK_CANCEL

                # Continue Heatsoak : previous item target reached    
                    {% else %}
                        # Set next sequence
                        {% set _=  _hs.soak.update({'current_seq' : seq if _hs.soak.current_seq == 'start' else loop.nextitem, 'reached': False}) %}
                        {% if printer['gcode_macro _' + _hs.soak.current_seq|string + '_reset'] is defined %}
                            _{_hs.soak.current_seq}_reset
                        {% endif %}
                        {% if _hs.soak.current_seq == 'timer' %}
                            _RESPOND MSG='HEATSOAK: Sequence `timer` for {_hs_sequence.timer.target} min'
                        {% else %}
                            _RESPOND MSG='HEATSOAK: Sequence `{_hs.soak.current_seq}` for max {_hs_sequence[_hs.soak.current_seq].timeout|default(_hs.soak.timeout)} min'
                        {% endif %}
                        
                        UPDATE_DELAYED_GCODE ID=_HEATSOAK_TIMEOUT DURATION={_hs_sequence[_hs.soak.current_seq].timeout|default(_hs.soak.timeout)*60}  # Set Timeout

                    {% endif %} 
                {% endif %}
            {% endif %}
        {% endfor %}
        SET_GCODE_VARIABLE MACRO=HEATSOAK VARIABLE=soak VALUE="{_hs.soak|string}"
        UPDATE_DELAYED_GCODE ID=_HEATSOAK_CHECK DURATION=0.1
    {% endif %}

# Cancel bedsoak (async only)
[gcode_macro _HEATSOAK_CANCEL]
gcode:
    SET_GCODE_VARIABLE MACRO=HEATSOAK VARIABLE=soak_pending VALUE=False
    SET_GCODE_VARIABLE MACRO=HEATSOAK VARIABLE=current_timer VALUE=0
    SET_GCODE_VARIABLE MACRO=HEATSOAK VARIABLE=total_timer VALUE=0
    UPDATE_DELAYED_GCODE ID=_HEATSOAK_CHECK DURATION=0
    UPDATE_DELAYED_GCODE ID=_HEATSOAK_TIMEOUT DURATION=0
    UPDATE_DELAYED_GCODE ID=_HEATSOAK_TIMER DURATION=0

#Set heater temperature/wait temp
[gcode_macro _wait_temp]
gcode:
    {% set _hs = printer['gcode_macro HEATSOAK'] %}
    {% set _hs_seq = printer['gcode_macro _User_Variables'].hs_sequence[_hs.soak.current_seq] %}
    
    # if heater detected set temperature
    {% if printer[_hs_seq.sensor].target is defined %}
        {% if printer[_hs_seq.sensor].target != _hs_seq.target and _hs_seq.target != 0 %}
            SET_HEATER_TEMPERATURE HEATER='{_hs_seq.sensor}' TARGET={_hs_seq.target}
        {% endif %}
    {% endif %}

    # check if temperature if reached
    {% if printer[_hs_seq.sensor].temperature >= _hs_seq.target|default(0)|int - _hs_seq.offset_temp|default(0)|int %}
        _HEATSOAK_NEXT
    {% else %}
        _RESPOND VERBOSE=True MSG="{_hs.soak.current_seq}/target {printer[_hs_seq.sensor].temperature}/{_hs_seq.target}"
    {% endif %}


[gcode_macro _bed_temp]
gcode:
    _wait_temp

# Compute smoothed quadratic derivative of bed_power
# based on Savitzky-Golay algorithm
[gcode_macro _bed_power]
# Below are experimental values DO NOT TOUCH
variable_min_vals: 15 #Min buffer length
variable_max_vals: 63 #Max buffer length
variable_buffer: []   #stored power values
variable_d: {'val': 100,'stable': 0}
variable_stability: 7.3E-6 
variable_stability_times: 4
gcode:

    {% if printer['gcode_macro HEATSOAK'].soak_pending %}

        # Populate buffer
        {% set pow= printer.heater_bed.power|float %}
        {% set _= buffer.append(pow) %}
        {% if buffer|length > max_vals %}
            {% set _= buffer.pop(0) %}
        {% endif %}

        {% if buffer|length > min_vals %} 
            {% set _=d.update({'val':0}) %}
        # normalize sample (size should be odd number)
            {% set half_window = ((buffer|length -1 )/2)|int %}
            {% set window_size = half_window*2 +1 %}
            {% set inc = 1 - (buffer|length % 2) %}  # 0 for odd, 1 for even
            {% set norm = (window_size -1 ) * window_size * (window_size + 1) * printer['gcode_macro HEATSOAK'].interval %}  # Normalization factor

        # Compute Smoothed Quadratic derivative of center value
            {% for i in range(window_size) %}
                {% set _=d.update({'val':0 + d.val + buffer[i + inc]*(i-half_window)/norm}) %}
            {% endfor %}

            _RESPOND VERBOSE=True MSG="Bed power variation {"%.2f" % (d.val*6000)}%/min, nb of samples: {window_size}" 
        {%endif %}
        
        # Test if stability is reached (4 times under "stability")
        {% if d.val|abs < stability %}
            {% set _=d.update({'stable': (d.stable + 1)}) %}
            {% if d.stable >= stability_times %}
                                
                _RESPOND MSG="Bed power stabilized {d.val*6000}%/min"
                _HEATSOAK_NEXT
                
            {% endif %}
        {% else %}
            #reset stabilized sample count
            {% set _=d.update({'stable': 0}) %}
        {% endif %}   
        
    {% endif %}

[gcode_macro _chamber_temp]
gcode:
    _wait_temp

[gcode_macro _extruder_temp]
gcode:
    _wait_temp

[gcode_macro _timer]
gcode:
    {% set _hs = printer['gcode_macro HEATSOAK'] %}
    {% set _hs_seq = printer['gcode_macro _User_Variables'].hs_sequence[_hs.soak.current_seq] %}
    UPDATE_DELAYED_GCODE ID=_HEATSOAK_CHECK DURATION=0
    UPDATE_DELAYED_GCODE ID=_HEATSOAK_TIMEOUT DURATION={_hs_seq.target*60}

# reset _bed_power variables
[gcode_macro _bed_power_reset]
gcode:
    SET_GCODE_VARIABLE MACRO=_bed_power VARIABLE=buffer VALUE='[]'
    SET_GCODE_VARIABLE MACRO=_bed_power VARIABLE=d VALUE='{ {'val': 100, 'duration': 0, 'stable': 0}|tojson|string }'

# Heatsoak Timer
[delayed_gcode _HEATSOAK_TIMER]
gcode:
    SET_GCODE_VARIABLE MACRO=HEATSOAK VARIABLE=current_timer VALUE={printer['gcode_macro HEATSOAK'].current_timer|int + 1 }
    {% if printer['gcode_macro HEATSOAK'].soak_pending %}
        UPDATE_DELAYED_GCODE ID=_HEATSOAK_TIMER DURATION=1
    {% endif %}